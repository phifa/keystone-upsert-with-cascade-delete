# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  """
  Upsert samples
  """
  upsertSamples(upsertArgs: [SampleUpdateArgs!]!): [Sample]
  createSample(data: SampleCreateInput!): Sample
  createSamples(data: [SampleCreateInput!]!): [Sample]
  updateSample(where: SampleWhereUniqueInput!, data: SampleUpdateInput!): Sample
  updateSamples(data: [SampleUpdateArgs!]!): [Sample]
  deleteSample(where: SampleWhereUniqueInput!): Sample
  deleteSamples(where: [SampleWhereUniqueInput!]!): [Sample]
  createSampleCar(data: SampleCarCreateInput!): SampleCar
  createSampleCars(data: [SampleCarCreateInput!]!): [SampleCar]
  updateSampleCar(
    where: SampleCarWhereUniqueInput!
    data: SampleCarUpdateInput!
  ): SampleCar
  updateSampleCars(data: [SampleCarUpdateArgs!]!): [SampleCar]
  deleteSampleCar(where: SampleCarWhereUniqueInput!): SampleCar
  deleteSampleCars(where: [SampleCarWhereUniqueInput!]!): [SampleCar]
  createSampleChild(data: SampleChildCreateInput!): SampleChild
  createSampleChildren(data: [SampleChildCreateInput!]!): [SampleChild]
  updateSampleChild(
    where: SampleChildWhereUniqueInput!
    data: SampleChildUpdateInput!
  ): SampleChild
  updateSampleChildren(data: [SampleChildUpdateArgs!]!): [SampleChild]
  deleteSampleChild(where: SampleChildWhereUniqueInput!): SampleChild
  deleteSampleChildren(where: [SampleChildWhereUniqueInput!]!): [SampleChild]
  createSampleGrandChild(data: SampleGrandChildCreateInput!): SampleGrandChild
  createSampleGrandChildren(
    data: [SampleGrandChildCreateInput!]!
  ): [SampleGrandChild]
  updateSampleGrandChild(
    where: SampleGrandChildWhereUniqueInput!
    data: SampleGrandChildUpdateInput!
  ): SampleGrandChild
  updateSampleGrandChildren(
    data: [SampleGrandChildUpdateArgs!]!
  ): [SampleGrandChild]
  deleteSampleGrandChild(
    where: SampleGrandChildWhereUniqueInput!
  ): SampleGrandChild
  deleteSampleGrandChildren(
    where: [SampleGrandChildWhereUniqueInput!]!
  ): [SampleGrandChild]
  createSampleGreatGrandChild(
    data: SampleGreatGrandChildCreateInput!
  ): SampleGreatGrandChild
  createSampleGreatGrandChildren(
    data: [SampleGreatGrandChildCreateInput!]!
  ): [SampleGreatGrandChild]
  updateSampleGreatGrandChild(
    where: SampleGreatGrandChildWhereUniqueInput!
    data: SampleGreatGrandChildUpdateInput!
  ): SampleGreatGrandChild
  updateSampleGreatGrandChildren(
    data: [SampleGreatGrandChildUpdateArgs!]!
  ): [SampleGreatGrandChild]
  deleteSampleGreatGrandChild(
    where: SampleGreatGrandChildWhereUniqueInput!
  ): SampleGreatGrandChild
  deleteSampleGreatGrandChildren(
    where: [SampleGreatGrandChildWhereUniqueInput!]!
  ): [SampleGreatGrandChild]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

type Sample {
  id: ID!
  name: String
  kids(
    where: SampleChildWhereInput! = {}
    orderBy: [SampleChildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleChild!]
  kidsCount(where: SampleChildWhereInput! = {}): Int
  cars(
    where: SampleCarWhereInput! = {}
    orderBy: [SampleCarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleCar!]
  carsCount(where: SampleCarWhereInput! = {}): Int
}

input SampleWhereUniqueInput {
  id: ID
  name: String
}

input SampleWhereInput {
  AND: [SampleWhereInput!]
  OR: [SampleWhereInput!]
  NOT: [SampleWhereInput!]
  id: IDFilter
  name: StringFilter
  kids: SampleChildManyRelationFilter
  cars: SampleCarManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SampleChildManyRelationFilter {
  every: SampleChildWhereInput
  some: SampleChildWhereInput
  none: SampleChildWhereInput
}

input SampleCarManyRelationFilter {
  every: SampleCarWhereInput
  some: SampleCarWhereInput
  none: SampleCarWhereInput
}

input SampleOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SampleUpdateInput {
  name: String
  kids: SampleChildRelateToManyForUpdateInput
  cars: SampleCarRelateToManyForUpdateInput
}

input SampleChildRelateToManyForUpdateInput {
  disconnect: [SampleChildWhereUniqueInput!]
  set: [SampleChildWhereUniqueInput!]
  create: [SampleChildCreateInput!]
  connect: [SampleChildWhereUniqueInput!]
}

input SampleCarRelateToManyForUpdateInput {
  disconnect: [SampleCarWhereUniqueInput!]
  set: [SampleCarWhereUniqueInput!]
  create: [SampleCarCreateInput!]
  connect: [SampleCarWhereUniqueInput!]
}

input SampleUpdateArgs {
  where: SampleWhereUniqueInput!
  data: SampleUpdateInput!
}

input SampleCreateInput {
  name: String
  kids: SampleChildRelateToManyForCreateInput
  cars: SampleCarRelateToManyForCreateInput
}

input SampleChildRelateToManyForCreateInput {
  create: [SampleChildCreateInput!]
  connect: [SampleChildWhereUniqueInput!]
}

input SampleCarRelateToManyForCreateInput {
  create: [SampleCarCreateInput!]
  connect: [SampleCarWhereUniqueInput!]
}

type SampleCar {
  id: ID!
  name: String
}

input SampleCarWhereUniqueInput {
  id: ID
}

input SampleCarWhereInput {
  AND: [SampleCarWhereInput!]
  OR: [SampleCarWhereInput!]
  NOT: [SampleCarWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SampleCarOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SampleCarUpdateInput {
  name: String
}

input SampleCarUpdateArgs {
  where: SampleCarWhereUniqueInput!
  data: SampleCarUpdateInput!
}

input SampleCarCreateInput {
  name: String
}

type SampleChild {
  id: ID!
  name: String
  kiddos(
    where: SampleGrandChildWhereInput! = {}
    orderBy: [SampleGrandChildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleGrandChild!]
  kiddosCount(where: SampleGrandChildWhereInput! = {}): Int
}

input SampleChildWhereUniqueInput {
  id: ID
}

input SampleChildWhereInput {
  AND: [SampleChildWhereInput!]
  OR: [SampleChildWhereInput!]
  NOT: [SampleChildWhereInput!]
  id: IDFilter
  name: StringFilter
  kiddos: SampleGrandChildManyRelationFilter
}

input SampleGrandChildManyRelationFilter {
  every: SampleGrandChildWhereInput
  some: SampleGrandChildWhereInput
  none: SampleGrandChildWhereInput
}

input SampleChildOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SampleChildUpdateInput {
  name: String
  kiddos: SampleGrandChildRelateToManyForUpdateInput
}

input SampleGrandChildRelateToManyForUpdateInput {
  disconnect: [SampleGrandChildWhereUniqueInput!]
  set: [SampleGrandChildWhereUniqueInput!]
  create: [SampleGrandChildCreateInput!]
  connect: [SampleGrandChildWhereUniqueInput!]
}

input SampleChildUpdateArgs {
  where: SampleChildWhereUniqueInput!
  data: SampleChildUpdateInput!
}

input SampleChildCreateInput {
  name: String
  kiddos: SampleGrandChildRelateToManyForCreateInput
}

input SampleGrandChildRelateToManyForCreateInput {
  create: [SampleGrandChildCreateInput!]
  connect: [SampleGrandChildWhereUniqueInput!]
}

type SampleGrandChild {
  id: ID!
  name: String
  baby: SampleGreatGrandChild
}

input SampleGrandChildWhereUniqueInput {
  id: ID
}

input SampleGrandChildWhereInput {
  AND: [SampleGrandChildWhereInput!]
  OR: [SampleGrandChildWhereInput!]
  NOT: [SampleGrandChildWhereInput!]
  id: IDFilter
  name: StringFilter
  baby: SampleGreatGrandChildWhereInput
}

input SampleGrandChildOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SampleGrandChildUpdateInput {
  name: String
  baby: SampleGreatGrandChildRelateToOneForUpdateInput
}

input SampleGreatGrandChildRelateToOneForUpdateInput {
  create: SampleGreatGrandChildCreateInput
  connect: SampleGreatGrandChildWhereUniqueInput
  disconnect: Boolean
}

input SampleGrandChildUpdateArgs {
  where: SampleGrandChildWhereUniqueInput!
  data: SampleGrandChildUpdateInput!
}

input SampleGrandChildCreateInput {
  name: String
  baby: SampleGreatGrandChildRelateToOneForCreateInput
}

input SampleGreatGrandChildRelateToOneForCreateInput {
  create: SampleGreatGrandChildCreateInput
  connect: SampleGreatGrandChildWhereUniqueInput
}

type SampleGreatGrandChild {
  id: ID!
  name: String
}

input SampleGreatGrandChildWhereUniqueInput {
  id: ID
}

input SampleGreatGrandChildWhereInput {
  AND: [SampleGreatGrandChildWhereInput!]
  OR: [SampleGreatGrandChildWhereInput!]
  NOT: [SampleGreatGrandChildWhereInput!]
  id: IDFilter
  name: StringFilter
}

input SampleGreatGrandChildOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SampleGreatGrandChildUpdateInput {
  name: String
}

input SampleGreatGrandChildUpdateArgs {
  where: SampleGreatGrandChildWhereUniqueInput!
  data: SampleGreatGrandChildUpdateInput!
}

input SampleGreatGrandChildCreateInput {
  name: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  samples(
    where: SampleWhereInput! = {}
    orderBy: [SampleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sample!]
  sample(where: SampleWhereUniqueInput!): Sample
  samplesCount(where: SampleWhereInput! = {}): Int
  sampleCars(
    where: SampleCarWhereInput! = {}
    orderBy: [SampleCarOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleCar!]
  sampleCar(where: SampleCarWhereUniqueInput!): SampleCar
  sampleCarsCount(where: SampleCarWhereInput! = {}): Int
  sampleChildren(
    where: SampleChildWhereInput! = {}
    orderBy: [SampleChildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleChild!]
  sampleChild(where: SampleChildWhereUniqueInput!): SampleChild
  sampleChildrenCount(where: SampleChildWhereInput! = {}): Int
  sampleGrandChildren(
    where: SampleGrandChildWhereInput! = {}
    orderBy: [SampleGrandChildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleGrandChild!]
  sampleGrandChild(where: SampleGrandChildWhereUniqueInput!): SampleGrandChild
  sampleGrandChildrenCount(where: SampleGrandChildWhereInput! = {}): Int
  sampleGreatGrandChildren(
    where: SampleGreatGrandChildWhereInput! = {}
    orderBy: [SampleGreatGrandChildOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SampleGreatGrandChild!]
  sampleGreatGrandChild(
    where: SampleGreatGrandChildWhereUniqueInput!
  ): SampleGreatGrandChild
  sampleGreatGrandChildrenCount(
    where: SampleGreatGrandChildWhereInput! = {}
  ): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
